#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2020-present Fewtarius

#Constants
STORAGE_DIR="/storage"
CONSOLE_DEVICE=/dev/console
. /etc/profile
DIR=$(realpath $(dirname $0))
. ${DIR}/update-utils

stop_emustation
clear > ${CONSOLE_DEVICE}
show_splash "$0"
clear > ${CONSOLE_DEVICE}

if [ ! -d "${USTAGE}" ]
then
  mkdir -p "${USTAGE}"
fi

message_stream "\e[31m351\e[39mELEC Update Utility - Starting Update...\n" .02

NETWORKING=$(online_status)
if [ "${NETWORKING}" == true ]
then
  $VERBOSE && log "Network connection detected"
  message_stream "\n\nChecking for updates in the ${BAND} channel..." .02
  getlatest
else
  $VERBOSE && log "No network connection detected"
  if [ -e "${USTAGE}/${UFILE}" ]
  then
    $VERBOSE && log "Local update package found"
    TAG=$(echo ${UFILE} | awk 'BEGIN {FS="-"}; {split($3, a, /.tar/); print a[1]}')
  fi
fi

UPDATE_AVAILABLE="$(update_available)"

if [ "${UPDATE_AVAILABLE}" != "no" ]
then
  UPDATE=true
else
  UPDATE=false
fi

if [ "${UPDATE}" == false ]
then
  $VERBOSE && log "No update available ${MYVERSION} >= ${TAG}"
  message_stream "\n\nNo update is available, nothing to do..." .02
  sleep 4
  clear > ${CONSOLE_DEVICE}
  start_emustation
  exit 0
else
  $VERBOSE && log "Update available ${TAG} () >= ${MYVERSION} (${OS_SHA256})"
fi

### We need a minimum of 3GB free on the games volume to download and extract the update.
for DEV in mmcblk1p1 mmcblk1 mmcblk0p3
do
  if [ -e "/dev/${DEV}" ]
  then
    break
  fi
done
check_space available ${DEV} GAMES 3072000

### 351ELEC 2.x needs 1GB on the boot volume.
BOOTREQ=1024000

check_space size mmcblk0p1 boot ${BOOTREQ}

if [ ! -e "${USTAGE}/${UFILE}" ] && [ ! -e "${USTAGE}/${UFILE}.sha256" ]
then
  if [ "${NETWORKING}" == true ]
  then
    $VERBOSE && log "Fetching ${UFILE} from ${REPO}"

    message_stream "\n\nFetching ${UFILE}...\n" .02
    hash &
    CHILD_PID=$!
    curl -H 'Cache-Control: no-cache' -Lo "${USTAGE}/${UFILE}" "${REPO}/${UFILE}" &>>${USTAGE}/update.log
    kill ${CHILD_PID}
    message_stream "\n\nFetching Checksum...\n" .02
    hash &
    CHILD_PID=$!
    curl -H 'Cache-Control: no-cache' -Lo "${USTAGE}/${UFILE}.sha256" "${REPO}/${UFILE}.sha256"  &>>${USTAGE}/update.log
    kill ${CHILD_PID}
    message_stream "\n" .02
  else
    $VERBOSE && log "No network connection available"
    message_stream "\n\nNetwork connection not detected, cannot continue..." .02
    exit 0
  fi
else
  $VERBOSE && log "Local update found"
  message_stream "\n\nLocal update found..." .02
fi

$VERBOSE && log "Verifying ${UFILE}"
message_stream "\nVerifying package..." .02
MYSUM=$(sha256sum ${USTAGE}/${UFILE} | awk '{print $1}')
DLSUM=$(cat ${USTAGE}/${UFILE}.sha256 | awk '{print $1}')

if [ ! "${MYSUM}" == "${DLSUM}" ]
then
  $VERBOSE && log "Verification failed: ${MYSUM} == ${DLSUM}"
  message_stream "\nVerification failed, cleaning up and exiting..." .02
  rm -f ${USTAGE}/*
  sleep 4
  clear > ${CONSOLE_DEVICE}
  start_emustation
  exit 1
else
  # If we are sure that we will do the update we store the sha256 checksum into
  # ${STORAGE_DIR}/.config/.OS_SHA256 for /usr/bin/updatecheck to verify if the
  # latest update is already installed or not
  echo $DLSUM > ${OS_SHA256}
  message_stream "\nVerification successful..." .02
fi

$VERBOSE && log "Syncing..."
message_stream "\n\nRebooting to continue update..." .02
sync
$VERBOSE && log "rebooting.."
reboot_system