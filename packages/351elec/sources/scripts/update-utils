#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2020-present Fewtarius

#Constants
STORAGE_DIR="/storage"
CONSOLE_DEVICE=/dev/console
. /etc/profile

# To make testing easier - allow running for ubuntu in 'test' mode
if [ ! -d "${STORAGE_DIR}" ]; then
  echo "Running on generic linux device - test mode"
  TEST="true"
  STORAGE_DIR="./test"
  
  # setup vars for testing
  TEST_VERSION=20210603
  TEST_SHA=745ee8fd94ad41adc738bffb36ae24f5127036cb5ccaa548e8cb05639d2ff649
  TEST_DEVICE=RG351V
  TEST_BAND="release"

  # ouput to stdout instead of /dev/console
  CONSOLE_DEVICE=/dev/stdout

  # Setup 'test' directory to simulate a real system
  CONFIG_DIR="${STORAGE_DIR}/.config"
  mkdir -p ${CONFIG_DIR}
  echo "${TEST_DEVICE}" > ${CONFIG_DIR}/.OS_ARCH
  echo "${TEST_VERSION}" > ${CONFIG_DIR}/.OS_VERSION
  echo "${TEST_SHA}" > ${CONFIG_DIR}/.OS_SHA256

  #Test versions of functions
  function get_ee_setting {
    echo "${TEST_BAND}"
  }
  function message_stream {
    echo -e "${1}"
  }
fi


### Global Modifiable variables
USTAGE="${STORAGE_DIR}/roms/update"
ARCH="$(cat ${STORAGE_DIR}/.config/.OS_ARCH)"
PREFIX="351ELEC-${ARCH}.aarch64"
MYVERSION=$(cat ${STORAGE_DIR}/.config/.OS_VERSION)
VERBOSE=true
BAND=$(get_ee_setting updates.type)
OS_SHA256="${STORAGE_DIR}/.config/.OS_SHA256"

if [ -e "${USTAGE}/update.log" ]
then
  rm "${USTAGE}/update.log"
fi

function getlatest() {
  # leave 'daily' band for backwards compatibility
  if [ "${BAND}" == "daily" ] || [ "${BAND}" == "release" ]
  then
    API="https://api.github.com/repos/pkegg/351elec"
    REPO="https://github.com/pkegg/351ELEC"
    PROVIDER="git"

    TAG=$(curl -H 'Cache-Control: no-cache' -Ls "${API}/releases?per_page=100" | python3 -c "import sys, json; print([release for release in json.load(sys.stdin) if release['prerelease'] == False ][0]['tag_name'])" 2> /dev/null)
    REPO="${REPO}/releases/download/${TAG}"  
    UFILE="${PREFIX}-${TAG}.tar"
  else
    echo "ERROR: No provider found for: ${PROVIDER}.  This is a coding error"
    exit 1
  fi
}

function reboot_system {
  if [ "${TEST}" == "true" ]; then
    echo "test: reboot"
  else
    reboot
  fi
}

function stop_emustation {
  echo "Stopping emustation..."
  if [[ "$TEST" == "true" ]]; then
     echo "systemctl stop emustation"
  else
     systemctl stop emustation
  fi
}
function start_emustation {
  echo "Starting emustation..."
  if [[ "$TEST" == "true" ]]; then
     echo "test: systemctl start emustation"
  else
     systemctl start emustation
  fi
}

function show_splash {

  if [[ "$TEST" == "true" ]]; then
    echo "test:  /usr/bin/show_splash.sh $1"
  else
    /usr/bin/show_splash.sh "$1"
  fi
}

function log () {
  echo "$(date): $1" | tee -a "${USTAGE}/update.log"
}

function online_status() {
  GW=$(ip route | awk '/eth0/ {a=$0} END{print $1}')
  if [[ ${GW} =~ [0-9] ]]
  then
    echo true
  else
    echo false
  fi
}

function hash() {
  while true
  do
    echo -n "#" >${CONSOLE_DEVICE}
    sleep 1
  done
}

get_available() {
  echo $(df | awk '/'$1'/ {printf $4; exit}')
}

get_size() {
  echo $(df | awk '/'$1'/ {printf $2; exit}')
}

check_space() {
  if [ "$TEST" == "true" ]; then
    return 
  fi
  MYSIZE="$(get_$1 $2)"
  VOLNAME="$3"
  REQUIRED="$4"
  if [ "${MYSIZE}" -lt "${REQUIRED}" ]
  then
    NEEDED=$(( (${REQUIRED} - ${MYSIZE} ) / 1024 ))
    message_stream  "\n\nThere is not enough free space available on the ${VOLNAME} volume to install this update.  Free up an additional ${NEEDED}MB, or reflash this version." .02
    sleep 10
    clear > ${CONSOLE_DEVICE}
    start_emustation
    exit 1
  fi
}
download_checksum() {
    local CHECKSUM_FILE="$1"
  	echo $(curl -H 'Cache-Control: no-cache' -Lo "${CHECKSUM_FILE}" "${REPO}/${PREFIX}-${TAG}.tar.sha256" &> /dev/null)
}
update_available() {
    if [ -z "${TAG}" ]
    then
      echo "no"
      return
    fi
    if [ "${TAG}" -ge "${MYVERSION}" ]
    then
      echo "${TAG} ${BAND^^}"
    else
      echo "no"
    fi
}
